import numpy as np
import cv2 as cv
import pandas as pd
from osgeo import gdal
import rasterio as rio
from rasterio.plot import show
import matplotlib.pyplot as plt
import richdem as rd
from rasterio.plot import show
import matplotlib
import elevation
import seaborn as sns
import geopandas as gpd
from rasterio.transform import from_bounds, from_origin
from rasterio.warp import reproject, Resampling
import rasterio

dem = rio.open("/Users/zijiawang/Desktop/polyugrad/site/test/data/DEM/ASTGTMV003_S18W069_demnum4X0Y1600")
dem_array = dem.read(1).astype('float64')
fig, ax = plt.subplots(1, figsize=(12, 12))
show(dem_array, cmap='Greys_r', ax=ax)
plt.axis("off")
plt.show()

fig, ax = plt.subplots(1, figsize=(12, 12))
show(dem_array, cmap='Greys_r', ax=ax)
show(dem_array, contour=True, ax=ax, linewidths=0.7)
plt.axis("off")
plt.show()

dem_richdem = rd.rdarray(dem_array, no_data=-9999)
fig = rd.rdShow(dem_richdem, axes=False, cmap='bone', figsize=(16, 10))

dem_slope = rd.TerrainAttribute(dem_richdem, attrib='slope_degrees')
rd.rdShow(dem_slope, axes=False, cmap='YlOrBr', figsize=(16, 10));

dem_filled = rd.FillDepressions(dem_richdem, in_place=False)
dem_filled_fig = rd.rdShow(dem_filled, ignore_colours=[0], axes=False, cmap='jet', vmin=fig['vmin'], vmax=fig['vmax'], figsize=(16,10))

filename = '/Users/zijiawang/Desktop/polyugrad/data/0.rawdata/DEM/n41_w114_1arc_v2.tiffnum1X0Y0'
gdal_data = gdal.Open(filename)
gdal_band = gdal_data.GetRasterBand(1)
nodataval = gdal_band.GetNoDataValue()

# convert to a numpy array
data_array = gdal_data.ReadAsArray().astype(np.float)

# replace missing values if necessary
if np.any(data_array == nodataval):
    data_array[data_array == nodataval] = np.nan

shasta_dem = rd.LoadGDAL('/Users/zijiawang/Desktop/polyugrad/data/0.rawdata/DEM/n41_w114_1arc_v2.tiffnum1X0Y0')

slope = rd.TerrainAttribute(shasta_dem, attrib='slope_riserun')
rd.rdShow(slope, axes=False, cmap='magma', figsize=(8, 5.5))
plt.show()

aspect = rd.TerrainAttribute(shasta_dem, attrib='aspect')
rd.rdShow(aspect, axes=False, cmap='jet', figsize=(8, 5.5))
plt.show()

# Plot out data with Matplotlib's 'contour'
fig = plt.figure(figsize = (12, 8))
ax = fig.add_subplot(111)
plt.contour(data_array, cmap = "viridis",
            levels = list(range(0, 5000, 100)))
cbar = plt.colorbar()
plt.gca().set_aspect('equal', adjustable='box')
plt.show()

fig = plt.figure(figsize = (12, 8))
ax = fig.add_subplot(111)
show(data_array)
plt.show()

#Plot our data with Matplotlib's 'contourf'
fig = plt.figure(figsize = (12, 8))
ax = fig.add_subplot(111)
plt.contourf(data_array, cmap = "viridis",
            levels = list(range(0, 5000, 500)))
cbar = plt.colorbar()
plt.gca().set_aspect('equal', adjustable='box')
plt.show()

#坡度计算，输入DEM数据计算坡度，输出坡度栅格，以度为单位
#输入参数中，data表示栅格数据，x_cellsize表示一个像元在x方向上的长度，如30米DEM数据x_cellsize和y_cellsize都为30
def ComputeSlope(data, x_cellsize, y_cellsize):
    kernel_x = np.array([[-1,0,1],[-2,0,2],[-1,0,1]],dtype=int)
    kernel_y = np.array([[-1,-2,-1],[0,0,0],[1,2,1]],dtype=int)
    dx = cv.filter2D(data, cv.CV_32F, kernel_x)/(8*x_cellsize) #计算在x方向上的变化率[dz/dx]
    dy = cv.filter2D(data, cv.CV_32F, kernel_y)/(8*y_cellsize) #计算在y方向上的变化率[dz/dy]
    slope_degree = np.arctan(np.sqrt(dx*dx+dy*dy)) * 57.29578
    slope_degree = np.around(slope_degree, decimals=2)  #保留小数点后两位
    return slope_degree

#坡向计算，坡向介于0（正北）到360（仍是正北）之间，即完整的圆
#坡向即坡度的方向
def ComputeAspect(data, x_cellsize, y_cellsize):
    kernel_x = np.array([[-1,0,1],[-2,0,2],[-1,0,1]],dtype=int)
    kernel_y = np.array([[-1,-2,-1],[0,0,0],[1,2,1]],dtype=int)
    dx = cv.filter2D(data, cv.CV_32F, kernel_x)/8
    dy = cv.filter2D(data, cv.CV_32F, kernel_y)/8
    aspect = 57.29578 * np.arctan2(dy, -dx)
    slope = ComputeSlope(data, x_cellsize, y_cellsize)
    cell = aspect
    cell[np.where(aspect<0)] = 90 - aspect[np.where(aspect<0)]
    cell[np.where(aspect>90)] = 360 - aspect[np.where(aspect>90)] + 90
    cell[np.where(0<=aspect) and np.where(aspect<=90)] = 90 - aspect[np.where(0<=aspect) and np.where(aspect<=90)]
    cell[np.where(slope==0)] = -1   #零坡度的像元坡向为-1
    return cell

df_dem = gdal.Open('/Users/zijiawang/Desktop/polyugrad/site/test/0/data/DEM/ASTGTMV003_S18W069_demnum4X0Y1600').ReadAsArray()
slope=ComputeSlope(df_dem, 30, 30)
aspect=ComputeAspect(df_dem, 30, 30)

pd.DataFrame(slope).to_csv('/Users/zijiawang/Desktop/polyugrad/site/test/0/data/DEM/slope.csv')
pd.DataFrame(aspect).to_csv('/Users/zijiawang/Desktop/polyugrad/site/test/0/data/DEM/aspect.csv')
